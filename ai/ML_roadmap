#  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣦⣴⣶⣾⣿⣶⣶⣶⣶⣦⣤⣄⠀⠀⠀⠀⠀⠀⠀                                              
#  ⠀⠀⠀⠀⠀⠀⠀⢠⡶⠻⠛⠟⠋⠉⠀⠈⠤⠴⠶⠶⢾⣿⣿⣿⣷⣦⠄⠀⠀⠀              𓐓  ML_roadmap 𓐔           
#  ⠀⠀⠀⠀⠀⢀⠔⠋⠀⠀⠤⠒⠒⢲⠀⠀⠀⢀⣠⣤⣤⣬⣽⣿⣿⣿⣷⣄⠀⠀                                              
#  ⠀⠀⠀⣀⣎⢤⣶⣾⠅⠀⠀⢀⡤⠏⠀⠀⠀⠠⣄⣈⡙⠻⢿⣿⣿⣿⣿⣿⣦⠀        Dev: oezzaou  oussama.ezzaou@gmail.com 
#  ⢀⠔⠉⠀⠊⠿⠿⣿⠂⠠⠢⣤⠤⣤⣼⣿⣶⣶⣤⣝⣻⣷⣦⣍⡻⣿⣿⣿⣿⡀                                              
#  ⢾⣾⣆⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠉⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇                                              
#  ⠀⠈⢋⢹⠋⠉⠙⢦⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇       Created: 2025/05/21 17:13:59 by oezzaou
#  ⠀⠀⠀⠑⠀⠀⠀⠈⡇⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇       Updated: 2025/06/21 16:13:37 by oezzaou
#  ⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢀⣾⣿⣿⠿⠟⠛⠋⠛⢿⣿⣿⠻⣿⣿⣿⣿⡿⠀                                              
#  ⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⢠⣿⣟⣭⣤⣶⣦⣄⡀⠀⠀⠈⠻⠀⠘⣿⣿⣿⠇⠀                                              
#  ⠀⠀⠀⠀⠀⠱⠤⠊⠀⢀⣿⡿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠘⣿⠏⠀⠀                             𓆩♕𓆪      
#  ⠀⠀⠀⠀⠀⡄⠀⠀⠀⠘⢧⡀⠀⠀⠸⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠐⠋⠀⠀⠀                     𓄂 oussama ezzaou𓆃  
#  ⠀⠀⠀⠀⠀⠘⠄⣀⡀⠸⠓⠀⠀⠀⠠⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                              


===[ ML-Engineer Skills: Data Scientist + Software Engineer ]===================
_______________________________________________________________________________
 | Skill                    | Comes from...          | Example                 |
 |--------------------------|------------------------| ------------------------|
 | Data preprocessing       | Data Scientist         | Clean and prepare data  |
 |                          |                        | with Pandas, NumPy      |
 |--------------------------|------------------------|-------------------------|
 | Model building           | Data Scientist         | Train models using      |
 |                          |                        | Scikit-learn or PyTorch |
 |--------------------------|------------------------|-------------------------|
 | Mathematics & Statistics | Data Scientist         | Understand algorithms,  |
 |                          |                        | loss functions,         |
 |                          |                        | regularization          |
 |--------------------------|------------------------|-------------------------|
 | Software development     | Software Engineer      | Write modular,          |
 |                          |                        | testable Python code    |
 |--------------------------|------------------------|-------------------------|
 | Version control          | Software Engineer      | Use Git to manage       |
 |                          |                        | projects and teams      |
 |--------------------------|------------------------|-------------------------|
 | APIs & deployment        | Software Engineer      | Use Flask, FastAPI,     |
 |                          |                        | Docker, etc. to deploy  |
 |                          |                        | models                  |
 |--------------------------|------------------------|-------------------------|
 | Performance optimization | Software Engineer + ML | Improve model speed,    |
 |                          | memory, and accuracy   |                         |
 |__________________________|________________________|_________________________|

===[ ML: RoadMap ]==============================================================
1|> Fundamentals (1–2 weeks)
    * Goal: Understand basic AI/ML workflow and core tools.
    > Topics:
      - NumPy & Pandas (data handling)         | Data preprocessing | Done, ... 
      - Matplotlib/Seaborn (data visualization)                     |
      - Scikit-learn (basic ML models)                              |
    > Resources:
      - NumPy Quickstart
        |=> 'https://numpy.org/doc/stable/user/quickstart.html'
      - Kaggle Pandas & NumPy Courses
        |=> 'https://www.kaggle.com/learn'
      - Scikit-learn tutorials
        |=> 'https://scikit-learn.org/stable/tutorial/index.html'

|> Practical Machine Learning (2 weeks)
    * Goal: Learn the ML process — preprocessing, training, evaluation.
    > Topics:
      - Supervised learning (classification, regression)                |
      - Model evaluation (confusion matrix, metrics)                    |
    > Mini-Projects:
      - Predict housing prices (regression)
      - Classify iris or MNIST digits
    > Resources:
      - Hands-On ML with Scikit-Learn (GitHub repo)
        |=> "https://github.com/ageron/handson-ml2"
      - ML Crash Course by Google
        |=> "https://developers.google.com/machine-learning/crash-course"

3|> Deep Learning Foundations (2–3 weeks)
    * Goal: Build neural networks and understand how deep models work.
    > Topics:
      - Neural networks, backpropagation                                |
      - PyTorch or TensorFlow basics                                    |
    > Resources:
      - Deep Learning with PyTorch: A 60 Minute Blitz
        |=> "https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html"
      - TensorFlow Beginner Tutorial
        |=> 'https://www.tensorflow.org/tutorials/quickstart/beginner'
      - Fast.ai course (Highly practical)
        |=> 'https://course.fast.ai/' 

4|> Specialization: Computer Vision & YOLO (2–3 weeks)
    * Goal: Apply AI to real-world images using YOLO.
    > Topics:
      - CNNs, image preprocessing                                       |
      - YOLOv5 or YOLOv8 for object detection                           |
    > Resources:
      - YOLOv5 Docs & Tutorials
        |=> 'https://docs.ultralytics.com/'
      - FreeCodeCamp Computer Vision Course
      - Roboflow: Annotate + Train YOLO
        |=> 'https://blog.roboflow.com/how-to-train-yolov5-on-a-custom-dataset/' 

|> Build Projects (Ongoing)
    * Goal: Apply everything you learned.
    > Ideas:
      - Object detection with YOLO on custom images                     |
      - Face mask detection                                             |
      - Real-time webcam object detection                               |
    > Resources:
      - Kaggle
        |=> 'https://www.kaggle.com/'
      - Awesome Deep Learning Projects on GitHub
        |=> 'https://github.com/aymericdamien/TensorFlow-Examples'

# TIP:==========================================================================
# - Focus on one tool per week.                                                |
# - Work on mini-projects — they accelerate understanding.                     |
# - Don't get stuck on theory — code > theory early on.                        |
# ==============================================================================
