#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä                 ìêì  Seaborn ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou <oussama.ezzaou@gmail.com> 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/07/16 17:39:05 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/07/18 18:57:27 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

===[ Index: ]===================================================================
1|> Seaborn: Introduction
2|> Built-in Datasets
3|> Distribution Plots (for quentitive/numerical variables) 
    1. sns.distplot(): visualize single variable distribution
    2. sns.jointplot(): compare & visualize two variable distributions
    3. sns.kdeplot(): visualize 1 or 2 variables using KDE instead of histograms
    4. sns.pairplot(): visualize all paires of a dataset in a form of grid 
    5. sns.rugplot(): just a complement plot, to visualize a single distribution
4|> Categorical Plots (for categorical variables) 
    1. sns.barplot(): visualize categorical based on estimator
    2. sns.countplot(): visualize categorical based on observation count 
    3. sns.boxplot(): 
    4. violinplot():


===[ Seaborn: Introduction ]====================================================
* 'Seaborn is high-level' python 'data visualization library' built 'on top of'
  'Matplotlib', It is specifically designed to make 'statistical graphics'
  easier and more attractive with 'minimal code'. 

===[ Motivation/Purpose Behind Seaborn: ]===
- The 'key here' is 'label data', as I am noticed that matplotlib, deal with
  'unlabled data (numpy.ndarray)', The same story repeats itself again
  (Numpy & Pandas). 

- 'Pandas' and 'Seaborn' Were Created for the same reason:
  " To Make 'working with labeled', 'structured data', 'easier and more' "
  " 'intuitive' than using raw 'Numpy arrays' "

  # NOTE:---------------------------------------------------------------
  # - DO NOT FORGET that <real-datasets> are <Labeled>, That way we need 
  #   Labled data structure to use (DataFrames & Series)

===[ Matplotlib VS Seaborn ]===
________________________________________________________________________________
| Feature / Aspect | Matplotlib                         | Seaborn              |
|------------------|------------------------------------|----------------------|
| Level            | Low-level (core plotting library)  | High-level (built on |
|                  |                                    | top of Matplotlib)   |
|------------------|------------------------------------|----------------------|
| Data Input Type  | Primarily `NumPy` arrays or plain  |`pandas` DataFrames & |
|                  | lists                              | Series (labeled data)|
|------------------|------------------------------------|----------------------|
| Pandas           | Not native, needs manual column    | Native works directly|
| Integration      | extraction                         | with column names    |
|------------------|------------------------------------|----------------------|
| Customization    | Very flexible ‚Äî full control       | Somewhat limited (but|
|                  |                                    | you can still access |
|                  |                                    | Matplotlib if needed)|
|------------------|------------------------------------|----------------------|
| Complex Plot     | Subplots via `plt.subplot()`       | Built-in functions   |
| Grids            | or `GridSpec`                      | like `FacetGrid`,    |
|                  |                                    | `PairGrid`, `catplot`|
|------------------|------------------------------------|----------------------|
| Learning Curve   | Steeper for complex plots          | Easier for statistical
|                  |                                    | visualizations       |
|------------------|------------------------------------|----------------------|
| 3D Plotting      | Supported via`mpl_toolkits.mplot3d`| ‚ùå Not supported     |
|------------------|------------------------------------|----------------------|
| Use Case         | General-purpose plotting           | Statistical/data-    |
|                  |                                    | driven exploration   |
|------------------|------------------------------------|----------------------|
| Underlying Engine| Native (core rendering engine)     | Uses Matplotlib under|
|                  |                                    | the hood             |
|__________________|____________________________________|______________________|

# QUESTION:[ Why is called Seaborn ? ]------------------------------------------
# - the library was created by 'Michael Waskom'
# - The name is a fly on the word 'Seaborn' meaning 'born from the sea', The
#   name 'brings new life (beautiful, elegant visualization from vast 'sea' of
#   raw data)'.
# - So The name is metaphorical, 'Seaborn' emerges to help you navigate and
#   visualize the vast sea of data with ease and beauty.
# NOTE:> vast: (adject) very big |----------------------------------------------

# INFO:[ Summary: ]=============================================================
# - 'Seaborn' is built to handle labeled data ‚Äî in other words, to work directly
#   with 'pandas DataFrames and Series'.
# ==============================================================================

===[ Seaborn: Built-in Datasest ]===============================================
* Seaborn library contains a set of built-in datasets.

  1|> 'seaborn.get_dataset_name()'
      * Used to 'list all available built-in datasets' that can be loaded using
        'seaborn.lead_dataset()'

        [ sns.get_datasets_names() ]
        . Returns a list of datasets names 

  2|> 'seaborn.load_dataset()'
      * Is used to 'load built-in datasets' provided by Seaborn into a
      'Pandas DataFrame'.

      [ sns.load_dataset(name) ]
      . 'name': The name of the dataset to load  
      # NOTE:---------------------------------------------------------
      # - `name` must be ones of those returned by get_dataset_names()
      # - You must be connected to the internet the 'first time', so
      #   Seaborn can fetch the list from the online repository.

===[ Distribution Plots: ]======================================================
* A 'distribution plot' visualizes how a datset is spread over a range of
  values, the 'probability distribution' of a single variable (univariate) or
  joint distribution of two variables (bivariate)
  - In Seaborn these plots help inderstanding:
    > The 'shape' of the data (normal, skewed, etc)
    > The 'spread (dispersion)' (range, standard deviation)
    > The 'central tendency' (mean, median)
    > Presence of 'outliers' or 'multiple modes'

===[ sns.distplot(): univariate plot ]===
* It is used as 'Histogram' with optional KDE and frequency/percent display
  - Good for basic distributin shape, binning frequency

    [ sns.distplot(data, x=None, kde=False, bins=10) ]
    . 'data'/'x': Dataset or Series
    . 'kde': Adds kernel density estimation curve
    . 'bins': number of histogram bins

  > [ Return values: ]
    - 'sns.histplot()' returns an 'Axes object' (matplot.lib.Figure.Axes)

===[ sns.jointplot(): bivariate plot ]===
* It is 'Multivariate plot' that combines scatter + hist/KDE for 2 variables
  - It is used to 'compare two distribution', and show the relationship between
    'two variables' 

    [ sns.jointplot(data=df, x='feature1', y='feature2', kind='scatter') ]

    . 'data': DataFrame containing the data
    . 'x', 'y': column names for 'x' and 'y' axes 
    . 'kind': Type of bivariate plot: 'scatter', 'kde', 'hist', 'hex', 'reg'


===[ sns.kdeplot(): both(univariate, bivariate) ]===
* Is it used to 'estimate and visulaize the probability density function (PDF)'
  of a 'continuous variable' using a technique called 'kernel Density Estimation'
  (KDE)
  - Think of as a 'smoothed version of a histogram' that provides a continuous
    curve rather than discrete bars.

    [ sns.kdeplot(data=df, x="feature") ]
    . 'data', 'x', 'y': Input dat (1D or 2D)

# QUESTION:[ Why using KDE instead of a Historgram? ]---------------------------
# - No bins
# - Smooth shape: reveals the underlying distribution bettter
# - More interpretable: good for detecting 'modality' (number of peas),
#   'skewness' or 'outliers'.

===[ sns.pairplot(): (multivariate) ]===
* 'sns.pairplot()' creats a 'grid of plots' showing 'pairwise relationship'
  between 'numeric variables' in a DataFrame
  - It helps in:
    > Visualizing 'correlation' and 'distributions'
    > Performing quick 'exploratory data analysis (EDA)'.

  [ sns.pairplot(data=df) ]
  . 'data': The dataFrame to visualize
  . 'hue': Categorical variable to color-code groups

===[ sns.rugplot(): (univariate) ]===
* A 'rug plot' is very simple plot that shows 'individual data points' along an
  axis as small 'tick marks'.
  - It is often used to 'complement' other plots (like KDEs or histograms)
    by showing the 'actual raw data values'
  - It does look like:
    > Each observation/case is shown as 'short-vertical or (horizontal) line'
      along the axis.
    > It looks like a 'rug' placed along the base of a plot
    # INFO:---------------------------------------------------------------------
    # Rug: (noun): a soft piece of material used to cover the floor (ÿ≥Ÿéÿ¨ŸëÿßÿØÿ©)

===[ Categorical Plots: ]=======================================================
* Categorical plots are used to 'visualize relationships involving categorical'
  'variables'.
  - These plots are useful when: 
    > You want to 'compare' values 'accross categories' 
    > You are analyzing 'distribution', 'central tendency', and 'spread' across
      different groups.
  # NOTE:> Categorical plots focus on distributions using categorical data

===[ sns.barplot() ]===
* 'seaborn.baplot()': is used to 'display the mean (or another estimator)'
  'of a quantitative variable for each category'.
  unlike 'boxplot()', which shows distribution, 'barplot()' shows 'aggregated'
  'values' (like the mean or median), often with 'confidence intervals'.

  [ sns.barplot(x='category', y='value', data=df, estimator='mean') ]

    . 'x', 'y': Are the input feature 
    . 'data': pandas DataFrame 
    . 'estimator': tells Seaborn 'how to summarize the data for each category'
                   when plotting 
                   - 'mean'   | np.mean
                   - 'median' | np.median 
                   - 'max'    | np.max
                   - 'min'    | np.min
                   - 'std'    | np.std 
                   -          | np.var
                   -          | np.cov
                   - ...      | etc

    # NOTE:> Aggregate data means summarize it in one quentity like mean.


===[ sns.countplot() ]===
* 'countplot()' is 'bar plot that displays the count (frequency) of'
  'observation/case' in each category of a categorical variable, Unlike
  'barplot()' which 'aggregates numeric data using an estimator (like mean)'
  - 'barplot()': bar height shows summary statistic (like mean, median, etc)  
  - 'countplot()': bar height show the 'count' of observation in a category 
  [ sns.countplot(x='category1', y='category2', dat=df) ]
  . 'x', 'y': The input features (categorical variables)
  . 'data': pandas dataFrame

===[ sns.boxplot() ]===
* 'seaborn.boxplot()' creates a 'box-and-whisker plot', which is a 'statistical'
  'summary plot' used to visualize the 'distribution', 'central tendency' and
  spread of a dataset, (especially across different categories).  

  [ sns.boxplot(x='x-axis', y='y-axis', data=df, hue=) ]

    . 'x', 'y': input features 
    . 'data': The pandas dataFrame                   
    . 'hue': (optional) categorical variables to split the bar 


===[ sns. violinplot() ]===
* A 'violin plot' combines features of:
  - 'boxplot'
  - 'kdeplot': showing the full distribution of the data 
  > So 'violin plot' is used to 'visualize the distribution and probability'
  'density' of a numeric varibale across one or more categories 

  # QUESTION:[ When to use it? ]================================================
  # > When you want to see both 'summary statistics' and 'distribution shape'.

  [ sns.violinplot(x='category', y='value', data=df) ]

    . 'x', 'y': input features 
    . 'data': The pandas dataFrame                   
    . 'hue': (optional) categorical variables to split the bar 





===[ Styling: ]=================================================================
