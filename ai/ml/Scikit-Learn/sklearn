#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä                 ìêì  sklearn ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou <OussamaEzzaou@gmail.com> 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/07/23 16:21:13 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/07/31 06:59:00 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

===[ Index: ]===================================================================
1|> Sickit-Learn 
    - Introduction 
    - sklearn built-in datasets
    - Input Features and Target Labels 
2|> Preprocessing
3|> Metrices 
4|> Meta Estimators 
5|> Human-Learn

===[ Sickit-Learn: ]============================================================
* Now that you are confortable with 'NumPy/Pandas' for data manipulation and
  'MatPlotLib/Seaborn', You are ready to dive into the next big step in the 
  'datscience pipline': 'machine learning and (scikit-learn)' 
  # NOTE:> scikit-learn (often abbreviated as 'sklearn')
  - Sickit-learn is a powerful, easy-to-use Python library for 'machine'
    'learning' It has been built on the top for core python libraries like:
    > 'NumPy': (for numerical operations)
    > 'SciPy': (for scientific computing) 
    > 'matplotlib' (for basic visualization)
  - It privides 'simple and efficient tools' for predictive data analysis,
    supporting, supporting both 'supervised' and 'unsupervised learning' 
    along with tools for:
    > 'Model Selection'
    > 'evaluation'
    > 'preprocessing'
  
  # QUESTION:[ Where does scikit-learn fit in the data Science live Cycle? ]===
  # 1|> Data Collection 
  # 2|> Data Cleaning (NumPy/Pandas)
  #     - remove duplicates
  #     - handle missing (drop nans, or imputation, mean, bfill, ffill, etc>) 
  #     - Correct Inconsisting formats ()
  # 3|> Exploratry Data Analysis (EDA)  
  #     - Data Visualization (matplotlib/Seaborn) 
  #     - Data Analysis
  #       . Summary statistics (df.describe(), df.info())
  #       . Understand relationships, distributions, correlations
  # 4|> Preprocessing (scikit-learn starts here) 
  #     - data Transformation (Feature Scaling & categorical Encoding) 
  #     - Feature Engineering
  # 5|> Modeling
  #     - Select ML algorithm (linearReression)
  #     - Train Model: model.fit()
  #     - Predict: model.predict()
  #     - Evaluate

===[ Sklearn: Built-in Datasets ]===
* Scikit-learn provides a collection of 'built-in datasets' that are useful for 
  'practicing machine learning' without having to search for or prepare data.
  - These datasets are available via 'sklearn.datasets'.

      |---------------[ Dataset Types in `Sklearn` ]------------------| 
      |                               |                               |
  [ Toy Datasets ]          [ Real Datasets ]         [ Synthetic Datasets ]
* Small and built-in      * They are slightly       * Scikit-learn allows you
> (Built-in)                larger datasets           to generate data to test
                            that are 'fetched'        specific algorithms
                            'from the internet'     > (Generated)
                            and my be cached
                            locally.
                            > (Downloaded)

1|> [ Toy Datasets: (Built-in) ]
    - These are loaded directly into memory and are very fast to access.
    ____________________________________________________________________________
    Function               | Description                      | Target Type    |
    -----------------------|----------------------------------|----------------|
    `load_iris()`          | Iris flower (3 classes)          | Classification |
    `load_digits()`        | Handwritten digits (0‚Äì9)         | Classification |
    `load_wine()`          | Wine characteristics (3 types)   | Classification |
    `load_breast_cancer()` | Breast cancer (malignant/benign) | Classification |
    `load_diabetes()`      | Diabetes disease progression     | Regression     |
    _______________________|__________________________________|________________|
    # NOTE:---------------------------------------------
    # - These return a 'Bunch object' like a dictionary.

2|> [ Real Datasets: (Downloaded) ] 
    - These are slightly larger datasets that are 'fetched from the internet'
      and may be cached locally.
    ____________________________________________________________________________
    Function                    | Description                    | Target Type |
    ----------------------------|--------------------------------|-------------|
    `fetch_california_housing()`|-House prices in California     | Regre       |
    `fetch_20newsgroups()`      |-Newsgroup text classification  | Class       |
    `fetch_olivetti_faces()`    |-Faces images (64x64 grayscale) | Class       |
    `fetch_covtype()`           |-Forest cover types from        | Class       |
                                | cartographic data              |             |
    `fetch_lfw_people()`        |-Labeled Faces in the Wild      | Class       |
                                | (face recognition)             |             |
    ____________________________|________________________________|_____________|
    # NOTE:-------------------------------------------------
    # - These functions typically include: 
    #   > `as_frame=True` (for returning a Pandas DataFrame)
    #   > `download_if_missing=True`

3|> [ Synthetic Datasets: (Generated) ]
    - Scikit-learn allows you to generate data to test specific algorithms.
    _____________________________________________________________________
    Function                           | Description                    |
    -----------------------------------|--------------------------------|
    `make_classification()`            |-Random classification dataset  |
    `make_regression()`                |-Random regression dataset      |
    `make_blobs()`                     |-Gaussian blobs (clustering)    |
    `make_moons()`                     |-Binary classification with     |
                                       | moon shapes                    |
    `make_circles()`                   |-Binary classification with     | 
                                       | circular shapes                |
    `make_multilabel_classification()` |-Multi-label classification     |
    ___________________________________|________________________________|

# INFO:[ Dataset Object Structure: `Bunch` ]====================================
# - Most datasets return a 'Bunch object' which behaves like a dictionary and 
#   typically includes:
#   {
#     'data': X,               # Features
#     'target': y,             # Labels
#     'feature_names': [...],  # Feature column names
#     'target_names': [...],   # Class names (for classification)
#     'DESCR': "...",          # Description text
#   }
# INFO:[ Summary: ]-------------------------------------------------------------
#   ____________________________________________________________________________
#   | Type      | Examples                   | Purpose                         |
#   |-----------|----------------------------|---------------------------------|
#   | Toy       | `load_iris`, `load_wine`   | Quick demos, learning concepts  |
#   | Real      | `fetch_california_housing` | Real-world data, larger scale   |
#   | Synthetic | `make_classification`      | Testing algorithms,             |
#   |           |                            | experimentation                 |
#   |___________|____________________________|_________________________________|
# ==============================================================================


===[ Sklearn: Input Feature ('X') & Input Labels ('Y') ]===
* 'X' represents the 'input features' 'Independent Variables', They are used
  to make 'predictions'.
* 'Y' represents the 'target label' 'Dependent Varibale', The are predection
  that i am interested in making

  > [ Exmaple: Titanic Dataset ]

    'X': Sex, Port, Price, Ticket, ... 
    'Y': Survived
