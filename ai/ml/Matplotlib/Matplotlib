#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä              ìêì  Matplotlib ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou <oussama.ezzaou@gmail.com> 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/07/10 15:41:04 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/07/14 20:40:04 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
===[ Index: ]===================================================================
1|> Matplotlib Introduction
2|> Figure & GridSpec (Grid Layout)
    - 'Figure Creation' (`figure()`, `subplot()` and `subplots()`)
3|> Axes (Subplots)
    - 'Axes Creation' (`add_axes()` and `add_subplots()`)
    - 'Axes Properties' (`title`, `xlablel`, `ylabel`, `ylim`, etc)
4|> Axes Methods for plotting (Plotting methods) 

===[ Matplotlib: Introduction ]=================================================
* 'MatPlotlib' is one of the most powerful and widely used libraries for
  'data visualization' in python, It is a '2D plotting' library.

  # INFO:> Matplotlib is build on the top of 'NumPy'

  import matplotplotlib.pyplot as plt

  plt.plot() # for plot line
  plt.show() # visualize the the plot

  - 'matplotlib.pyplot': is 'high-level stateful interface' to Matplotlib, it is
    a 'Module'.

===[ Figure & GridSpec ]========================================================
* A 'Figure' is 'top-level container (canvas)' that holds all plot elements,
  It is the 'entire canvas' on which everything is drawn.
  - Think of it as the 'page' or 'window' that contains your visualizations.
    Here is a detailed breakdown ot its 'role', 'structure', and 'relation to'
    'subplots and axes'.

--> [ Role of A Figure: ]
    - A 'Figure' represents 'the whole image (canvas)' or 'plotting area',
      including 'subplots', 'titles', 'legends', and 'other decorations'.
    - It serves as the 'container' for one or more 'Axes' objects.
    - It defines the 'output size' and manages 'layout resolution (DPI)', and
      'saving to file' (e.g, via 'savefig()').

--> [ Structure Of A Figure: ]
    * A 'Figure' is made up of:
      - 'Axes': The actual plotting area(s) where data is visualized. 
      - 'Subplots': A grid of Axes created via 'plot.subplot()' or
                    'plot.subplots()'
      - 'Figure-level elements': Titles ('fig.suptitle()'), legends(shared),
                                 colorbars, etc.
      - 'Metadata': DPI, size, background color.
    _____________________________
    | Grid Layout 'GridSpec'    |
    | _________________________ |
    | | Figure                | |
    | | _____________________ | |
    | | | Axes (Subplot) 1  | | |
    | | |                   | | |
    | | |___________________| | |
    | | | Axes (Subplot) 2  | | |
    | | |                   | | |
    | | |___________________| | |
    | |_______________________| |
    |___________________________|

--> [ Example: ][IT'S A VERY IMPORTANT EXAMPLE ]===
    from matplotlib.gridspec import GridSpec
    import matplotlib.pyplot as plt

    # Create An Empy Figure object with size of 3 rows and 3 cols
    fig = plt.figure(figuresize=(3, 3))
    # Create A GridSpec Layout that contains 2 cells (Specifications)
    # as helper for fig object
    grid_spec = GridSpec(1, 2, figure=fig) 
    # Extract a specific cell/SubPlotSpec: Whiches the second cell
    spec = grid_spec[0, 1] 
    # pass cell/SubPlotSpec to the Figure, Figure uses it to position the Axes. 
    ax = fig.subplot(spec) 
    # Axes Draws a plot 
    ax.plot([1, 2, 3])

# INFO:[ VERY IMPORTANT ]-------------------------------------------------------
# - GridSpec is only a layout helper.
# - It‚Äôs not a container. It doesn‚Äôt draw anything.
# - It just tells the Figure:
#   ‚ÄúHere‚Äôs how to divide yourself into a grid.‚Äù
# - It guides the Figure on how to divide its space into a grid of cells.
# - Besides GridSpec, Matplotlib offers a few other helpers and layout tools
#   to organize subplots within a Figure (constrained_layout, tight_layout, etc)
# NOTE:-------------------------------------------------------------------------
# - In Matplotlib, there is 'no separate object type called' `Subplot` in most
#   common usage:
#   . When we say 'subplot', we are referring to an 'Axes Object' that was
#     created using a grid layout like plt.subplot() or plt.subplots()
# - 'GridSpec' class is just a helper class to 'calculate layout geometry'
#   (rows/cols/sizes), 'GridSpec' has no 'drawing power'
# CONCLUSION:> So the term 'subplot' just means an Axes arranged in a grid

===[ Figure Creation: ]===
* 'Figure Object' is just a container for Axes Objects (subplots). 

  1|> 'plt.figure()': This is the basic 'Low-level' way to create a Figure Obj.
      - It Creates an 'Empty Figure', You must 'manually add Axes' (add_axes(),
        add_subplot()), and 'GridSpec' Grid Layout Helper class.

      [ plt.figure(figsize=()) ]

        . figsize=(rows, cols), defines the 'fig' size 

  2|> 'plt.subplot()': This is an 'older way' to create 'one subplot', It  
      creates/add and return 'a single Axes Object' in 'specific position of a'
      'grid' inside the current 'Figure'.

      [ plt.subplot(nrwos, ncols, index) ]

        . 'nrows': Total number of rows in the grid
        . 'ncols': Total number of columns in the grid
        . 'index': index of subplot (row-major, 1-based indexing)
        # QUESTION:[ What is row-major and 1-based indexing ?]---|
        # - row-major: means you fill the grid 'row by row',     | 
        #   left -> right                                        | 
        # - 1-based indexing: countring/indexing starts at 1,    |
        #   not 0, So the first subplot at index 1               |
        # - row-major, 1-based indexing: first 1, second 2, ...  |
        # - This technique does not use index as (row, col),     |
        #   It does use one single integer instead               |
        #   > Exmaple 2x2 grid                                   |
        #     index 1: is the first element > top-left           |
        #     index 2: is the second element > top-right         | 
        #     index 3: is the third element > buttom-left        | 
        #     index 4: is the fouth element > buttom-right       | 
        # --------------------------------------------------------

    # NOTE:[ VERY IMPORTANT NOTE ]============================================== 
    #- plt.subplot() uses an INTERNAL VERSION OF 'GridSpec' to define the layout

  3|> 'plt.subplots()': This the 'most prefered' way to 'create' a Figure with
      'one or Axes(subplots)' all at once in a grid. 
      - Returns 'two things':
        1. The `Figure` object
        2. An array (or single) of 'Axes' objects

      [ fig, axs = plt.subplots(nrows=, ncols=) ]

        . 'fig': the main figure container 
        . 'axs': is 1D/2D NumPy array of 'Axes' objects 
                 indexed like 'axs[row, col]' starting at 0

    # NOTE:[ VERY IMPORTANT NOTE ]============================================== 
    #- plt.subplot() uses an INTERNAL VERSION OF 'GridSpec' to define the layout

> [ Summary: ]

    |---------------------[ Figure Object Creation: ]--------------------|
    |                                 |                                  |
[ plot.figure() ]              [ plot.subplot() ]            [ plot.subplots() ]
- low-level one               - Create/Add subplot          - Create a Figure
- creates an empy Figure        axes at specific              and one or more
- Does not create 'GridSpec'    position                      subplots all at 
                              - Creates 'GridSpec'            onces
                                                            - Creates 'GridSpec'

===[ Axes: (Subplot) ]==========================================================
* 'Axes/Subplot' represents a 'ploting area, plot or graph' inside a 'figure'. 
  - 'Axes' is 'container' for elements like: actual data curves, X and Y axes,
    Ticks, lables, titles and grid lines. This way people often call a 'subplot'

    # NOTE:---------------------------------------------------------------------
    # - One Figure can Contain multiple Axes (multiple plots)
    # - A subplot is simply 'one axes' in a grid layout.

  > [ Analogy: ] 
    * Think of:
      > 'Figure' -> a sheet of paper 
      > 'Axes(subplot)' -> 'frames' or 'boxes' drawn on the paper.
      > You can draw a 'different picture' inside each frame
 

===[ Axes (subplot) Object Creation: ]===

        |---------------------[ Axes Object Creation: ]--------------------|
        |                                 |                                |
    [ plot.subplots() ]           [ fig.add_subplot() ]       [ fig.add_axes() ]

    1|> 'fig.add_subplot()': add one 'Axes' as a 'subplot' inside an 'existing'
                             'figure'.
        [ fig.add_subplot(nrows, ncols, index) ]
          or
        [ fig.add_subplot(SubplotSpec) ]

        - This divides the figure into 'nrows x ncols' grid and 'places' the
          subplot in 'index' cell position.
        - add_subplot() can take a 'SubplotSpec' object to create an Axes
          object at that specific 'subplotspec/spec/grid cell'.

    2|> 'fig.add_axes()': Create an 'Axes' by specifying its 'exact position' on 
                          the figure 
        [ fig.add_axes(left, bottom, width, height) ]
        - It gives a 'full control' over layout (not restricted to a grid)

# NOTE:=========================================================================
# - You could also use plt.subplot() and plt.subplots() to create figure and
#   axes all at once.
# ==============================================================================

  > [ Summary: ]
    __________________________________________________________________
    | Method              | What it does          | Use When         |
    |---------------------|-----------------------|------------------|
    | `plt.subplots()`    | Creates Figure + grid | Most common,     | 
    |                     | of Axes               | easiest layout   |
    |---------------------|-----------------------|------------------|
    | `fig.add_subplot()` | Adds Axes as subplot  | You want manual  |
    |                     | to existing Fig       | subplot control  |
    |---------------------|-----------------------|------------------|
    | `fig.add_axes()`    | Adds Axes at exact    | You want precise |
    |                     | position              | placement        |
    |_____________________|_______________________|__________________|

===[ Axes Properties: ]===
* Key Axes properties (grouped by Object Type)

  1|> Axes 
      > [ Styling: ]
      . 'linewidth': Width of axes border
      > [ labels: ]
      . 'title': Title text of the plot (use `ax.set_title()`)
      . 'X-axis label', set title of x-axis label (use ax.set_xlabel('X label'))
      . 'Y-axis label', set title label of y-axis (use ax.set_ylabel('y-label'))
      >  [ Axes Limits & Scaling ]
      . 'xlim': 'min' and 'max' values of 'X', use `x.set_xlim()` to change it 
      . 'ylim': 'min' and 'max' values of 'Y', use `x.set_ylim()` to change it 
      > [ Legends ]
      * A 'legend' in matplotlib is small box placed in a plot that 'explain'
        'what each line, marker, or color represents', Legends contains
        'plot labels'. 
        > It is useful when you have multiple plots on the same Axes.
        [ ax.legend(): show legend ]

          .'loc=': defines the location of the legend box (e.g 'center') 
          . 'numpoints': defines the number dots, marks in the legend box 



  2|> Plot Elements (lines, Scatter, etc)
      * Adding plot object to axes like (Line2D, ...)
        
      [ scatter = ax.scatter([...], [...]) ]

      --> 'plot color'    : scatter.set_color("color")
      --> 'plot linewidth': scatter.set_linewidth(2)
      --> 'linestype'     : scatter.set_linestyple("--")
      --> 'marker'        : scatter.set_marker("o") or '*'
      --> 'alpha'         : scatter.set_alpha(0.8) # transperancy 0|->1

  # NOTE:--------------------------------------------------------------------
  # > different plots (line plot, scatter, etc) can share one 'Axes object' |
  #   , It can be drawn in the same <X-axis and Y-axis>.                    |
  # -------------------------------------------------------------------------

# INFO:[ Summary: ]=============================================================
# * There are two types to set or change the property:
#   - Property-based configuration (e.g. plot(..., color='red'))
#   - Setter-based configuration (e.g. line.set_color('red'))
# ==============================================================================

===[ Axes Ploting Methods: ]====================================================
* Axes-level ploting methods return an 'artist objects', 'Artist' class is the
  core 'rendering interface'.
  - 'Artist' in matplotlib 'is anything that can be drawn on a Figure'.
  
  # NOTE:> Every visible thing: lines, text, ticks, axes, legends is an 'artist'
      
      |------------[ matplolib.artist.Artist ]------------|         | Super 
      |          |             |              |           |
[ Line2D ]     [ Patch ]   [ Collection ]   [ Text ]      [ Image ] | Derived
For lines   | For shapes |  scatterplots  | for labels | for raster
            |  like      |  , many patches| titles     | data
            | rectangles |                |            |
            | , circles  |                |            |

===[ Plot: Scatter (Path Collection) ]===
# REVISION:------------------------------------------------
# Scatter plot is used to show the relationship between two
# numerical/quentitive varibales.

  > [ Syntax: ]
      
      >>[ ax.scatter(x, y, **kwargs) ]<<
      
      . `x`, `y`: are numpy arrays coordinates of points 
      . `c`     : Color of points (single color or array of values)
      . `s`     : Size of points
      . `marker`: Shape of points (`'o'`, `'x'`, `'^'`, `'s'`, etc.)
      . `alpha` : Transparency (0.0 to 1.0)
      . `label` : Label for use in legend
      . `edgecolors`: Color of marker border
      . `cmap`: 'Colormap' for mapping numerical 'c' values, (katlawen  
                kol dot bi chi color based 3la chi pattern, gradient, etc) 

    # NOTE:---------------------------------------------------------------------
    # - You can directly pass a property value to scatter function
    #   (property-based configuration) or set property using setter function
    #   (setter-based configuration)
    # --------------------------------------------------------------------------

===[ Plot: line (Line2D) ]===

# QUESTION:[ What is the difference btween 'scatter plot' and 'line plot' ]=====
#  'Line Plot': connects data points with lines, typically showing
#   'how variable changes over time' or in response to another continuous
#   variable. 
#   > [ Use cases: ]  
#     . Points are connected
#     . Emphasizers 'trends', 'progression' or 'patterns'
#     . Common in 'time series Data'
# - A 'Scatter plot': displays individual data points as 'dots' on a 2D plan
#   without connecting them, It is used to show the 'relationship or
#   correlation' between two varibales
#   > [ Use Cases: ]
#     . No lines between points.
#     . Highlights 'distribution', 'clusters' and 'correlation'
#     . Common in 'regression analysis' and 'pattern detection'
# CONCLUSION:-------------------------------------------------------------------
# |> Use a 'line plot' when you are showing data over time (e.g, temperature
#    changes), When the data points have a 'logical or chronological order'.
# |> Use a 'scatter plot' when you want to explore the 'relationship betwee
#    two variables' (e.g, height vs weight) 
# ------------------------------------------------------------------------------




# Hello everyone,
#
# I'm Imane Lamine, a Business Development Manager at UM6P Canada. I‚Äôd like to briefly clarify the roles to help you focus on the technical aspects:
#
#     Coding School 1337 will be handling the whole recruitment process and the call for applications. 
#
#     UM6P Canada is serving as a liaison between Coding School 1337 and FlexGroups based in Canada. 
#
#     FlexGroups will be responsible for hiring and issuing your contracts and answering your technical questions.
#
# You can still send us your questions via 1337 Team.
