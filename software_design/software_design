#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä         ìêì  software_design ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou </var/spool/mail/oezzaou> 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/03/31 16:07:32 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/03/31 16:10:33 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              


=======================>> [ Microservices Architecture ] <<=====================
=>  is a design approach in sofware development, where an application is splited
    into independent services that communicate over network, each microservice
    is responsible for a specific functionality, it can be developed, deployed,
    and scaled independently of other services.

	advs:
		- flexibility: each microservice can be developed using a programming
      language (or framework) suitable or the best for your needs.
		- maintainability: Simple, focused, easy to maintain
      (to make something continue in the same situation)
		- each service can be scaled independently of the others

There are several type of architecture:

	1 ->> Monolithic Architecture (app that i have built before using java)
		- The traditional arch where the entire applicaiton is build as single
      unit (tay dir chla hwaj)
		+ advs:
			- easier to test and manage as single unit
			- less complex communication between components
		+ dadvs:
			- harder to scall
			- any change require redeploying the entire application
		+ usecase : simple applications

	2 ->> Service-Oriented Arch (SOA)
		+ advs:
			- promotes reuse of services across different applications
		+ diadvs:
			- Requires more infrastructure.
			- Can be complex to implement and manage
		+ usecase: large and scalable applications

	3 ->> Event-Driven Architecture (thread-base ?)
		- This system is designed around events and events handler
		+ advs
			- highly responsive and scalable for real-time or reactive systems.
		- diadvs:
			- defficult to track the flow of events.
		+ usecase: large and scalable applications

	5 ->> Client-Server Architecture
		- clients request resources from a central server, server process the
      request and sends the responce back to the client. 
		+ advs:
			- Server is the contral unit 
			- easy to maintain and update server-side applications
		+ diadvs:
			- client can experience slower performance during stress server

	6 ->> Severless Architecture (without server ex: my eps mobile is an application that manage my backend)
		+ build application without managing the underlaying infrastructure (firebase, aws, azue, goolge cloud)
		advs:
			+ pay only for device resouce
			+ no need to manage to scale the infrastructure
		diadvs:
			+ limited control over infrastructure

	7 ->> Layered (N-Tier) Architecture
 		- Applications are divided into layers, typically including a presentation layer (UI), business logic layer, data access layer, and database. Each layer 		interacts with the one directly above or below it.
		+ Advantages:
			- Clear separation of concerns.
			- Easy to manage and understand for developers.
		+ Disadvantages:
			- Can become inefficient due to multiple layers and data transformations.
			- More rigid structure that may not scale well for complex, dynamic applications.

==> What is the difference between software architecture & software desing pattern ?
+ they are related but represent a different levels of abstraction in software development
+ Scop:
	- app design : high-level structure, involving the entire system (monolithic, microservices, SOA ...) (relation between component) 
	- software design: (low to mid-level) resuable solution to common design problems (factory, reactor, proactor, singelton ...) (relation between classes)
Relation:
	- design arch can work or use desing pattern, monolithic can use singlton desing patter, microservers can use observer pattern
	for communication between services.
	- design architectures defines the big picture, while software design pattern solve a specific problem within this architecture
														
														=> Microservice Instances		: database, message brokers (single responsibiltiy)
Client (mobile, browser, IOT ...) =>	API GATEWAY		=> Microservice Instances		: database, message brokers (single responsibiltiy)
														=> Mircoservice Instances		: database, messgae brokers (single responsibiltiy)

Microservice is single Responsibiltiy that makes:
	+ Business Boundary (noun: a line that devides two areas or forms and edge around an area)
	+ Function Boundary

The question here is how to define each microservice role or scope depending on the business context ?
	> DDD (Domain Driven Design)

[ Microservices Core principales: ]

1_Communication Design:

It is nessery that micro services communicate over netowrk sync or async communication (but in local development or testing micro servcices my user IPC to communicate
with each others using mechanism like UNIX socket or shared memory)

async && sync:
	=> in context of programming the X function refers to how tasks are executed: how long function waits for task to finish before moving to the next one
		+ sync function: each taks must be completed before moving to next one (is a blocking function, ex reading from file)
		+ aysnc function: tasks are executing without waiting for the prev ones to complete (is a non-blocking function, file operations)
				(writing in the file is a long task, meanwhile the write function allows the program to execute the other tasks without waiting)
	=> in context of communication refere to how people exchange information regarding timing and responsivness. (kifach tanhadro)
		+ sync communication: occurs in real-time where all responding immediately or withing a short time frame (phone call, live chat, in-person meetings).
		+ async communication: Responses can heppen after a time delay, allowing response at any point (Email, text messgae) it provides flexibility. 

>>>> ISC: inter service communication
- Micro services can communicate using several protocols
 - synchronous communication: one service calls another and waits for response, making the communication blocking. 
	+ HTTP protocol / GRPC (remote procedure call)
 - aysnchronous communication: sends a request and doesn't wait for immediate response, makeing the communication non-blocking.
	+ Message Brokers: message queues (RabbitMQ, Apache Kafka, AWS SQS), send message to a queue, which another service consume at its own pace
	+ Event-Driven: when service A completes a task, it emits and event service B, which is listening for that event, receives it and performes further actions.

2_API Gateway: is an essential component in a microservices architecture that acts as single entry point for client requests, adds a level of abstraction between 
client & microservices, reduce the security (client should not know the microservice that are communicating with (end point)), acts as front door for applications to access
data, business logic, or functionality from your backend services.

API Gateway Product
- AWS Gateway
- NGINX
- API Management
- NETFLEX ZUUL 

!!!!: there is one problem: API gateway should not be the single point of failure (solution: improve resouces, make more instance ...) 

3_Service Discovery: netflix eureka, etcd, zookeeper, skydns, consul 
- service registry:

service discovery refere to process of maping and registring the ip address instances into service-registry (service discovery depends on service registry) 

 >> [ API gateway VS load balancer VS reverse proxy ]

- the are all part of web ecosystem (network infrastructure) , how are they all work together ?

* API gateway:
	- designed to handle api requests and provide a single entry point between client and multiservices (usually microservices)
		Features :
			+ Routing to the specific service (Routes based on API path or method)
			+ security: adding layer of abstraction
			+ transfer incoming request into formats that backend services understand
			+ Caching: improve performance
			+ Rate limiting: limiting the number fo requests clients can make
			+ Monitoring & logging: Track and provides logs for all API
			Use Case: in Microserices architecture, manage access to many backend services via a single unfied API layer.

* Load Balancer:
	- designed to distribute incoming traffic across multiple servers (or services), to prevent any single server from being overwhelmed (v: to defeat someone or something by using a lot of force).
		Features:
			+ Traffic Distribution: Spread Client requests across a pool of backend servers (Routes based on IP/Port (L4) or URL/Header (L7)).
			+ High Availability: provent unheadlty or failed server.
			+ Session Checks: check for healty server to ensure only these onces receive traffic,.
			+ Wark at different OSI layer: Layer 4(transport layer, based on port & IP), Layer 7(application layer, based on HTTP header, application-level information)
			Use Case: in web hosting environment, where you have multiple we servers.

* reverse proxy:
	- is the Gateway or the entry point between client and webservers (advs: hidding the backend servers, ssl termination, caching ...)
	- layer of security for server-side part in reverse we have proxy that provides a layer of security for client-side part
		Features: 
			+ focuse more on security (adding a layer of security between client and backend server)
			+ SSL Termination: manage ssl certificates, and decrypts incoming traffic before forwarding it to the backend server
			+ caching: can cache responces to speed up content delivery.
			+ Load Balancing: some reverse proxies can do lead balancing across multiple servers. 
			Use Case: protect backend server.

problem: in every distrebuted arch, we need to find the physical address of where a machine is located.
address of physical address of each instance of microservice.

[ software live cycle (local development, testing, production) ]
