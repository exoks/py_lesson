#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä                   ìêì  NumPy ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou </var/spool/mail/oezzaou> 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/06/18 09:48:50 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/06/28 19:09:24 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

===[ Summary: Index ]===========================================================
1|> Array Creation: different methods to create 'ndarray' arrays 
    . Built-in functions factory     | np.array()/zeros()/onces()/full()/empty() 
    . ndarray consturctur            | ndarray(shape=, dtype=, ...)
    . create array with random values|  

2|> Array Manipulation               | np.reshape()/append()/delete()/vstack() .. 
3|> Array Indexing & Slicing
4|> Searching & Sorting 
5|> Math operations
6|> Tensors

===[ NumPy: ]===================================================================
* NumPy (short for 'Numerical Python') is a powerfull open-source library in
  python used for 'numerical computing', It provides support for large multi
  dimensional arryas and matrices, along with a wide collection of mathematical
  functions to operate on them efficiently.


# INFO:[ Python Lists VS NumPy Arrays ]==========================================
# - Lists are implemented using 'dynamic arrays' in C via the CPython
#   interpreter.
#   . Each list element is a 'pointer' to a python object 
# -> This means lists are: 
#   . Heterogeneous: can store anything (int, str, object)
#     (polymorphism + single root object model) 
#   . Flexible but slower: every access requires pointer
#     dereferencing + type checking. 
# - NumPy Arrays (ndarray) are implemented in c and behave like 'contigous'
#   'memory blocks' storing raw data (not pointers)
#   . It does not use object to represent a raw data, it does use primitive
#     data type (bi bassata homa l arrays dyal c)
#   . All elements are of the 'same fixed data type' (float64, int32)
#   ______________________________________________________________________
#   | Feature         | Python List         | NumPy Array                |
#   |-----------------|---------------------|----------------------------|
#   | Element storage | Pointers to objects | Raw bytes (fixed-size)     |
#   | Homogeneity     | Can mix types       | Fixed dtype                |
#   | Memory locality | Poor                | Excellent (cache-friendly) |
#   | Vectorization   | Manual loops        | Native (SIMD, BLAS)        |
#   | Type checking   | Dynamic (slow)      | Static (fast)              |
#   |_________________|_____________________|____________________________|


> [ NumPy Array Object attributes: ]
  ____________________________________________________________________
  | Component | Description                                          |
  |-----------|------------------------------------------------------|
  | data      | Pointer to the memory block (raw C array)            |
  | dtype     | Data type of each element (`float32`, `int64`, etc.) |
  | shape     | Dimensions of the array (e.g., (3, 4))               |
  | strides   | Number of bytes to step in each dimension            |
  | ndim      | Number of dimensions (1, 2, 3, ...)                  |
  | flags     | Memory layout flags (C-contiguous, etc.)             |

===[ Array Creation: ]===
* There are two main methods to create 'ndarray' 

   |-----------------------[ Array Creation Methods ]----------------------|
   |                                    |                                  |
[ ndarray class consturctor ]           |          [ built-in Function Factory ]
> np.ndarray(shape=(3, 2),              | > Use built-in functions:            
          dtype=np.int32, buffer=data)  |   . np.array()  . np.eye()
. 'shape': is tuple                     |   . np.zeros()  . np.diag() 
. 'dtype': is the data type, (int32,    |   . np.onces()  . np.arange()) 
           int64, float32, float64, etc)|   . np.full()   . 
. 'buffer': data                        |   . np.empty()  . 
# NOTE:=================================|=======================================
# THIS IS NOT COMMONLY USED, it is      | This is the most commonly used method
# low-level and mainly for advanced     | to create arrays.
# memory control.                       |

> [ built-in Factory Functions: ]
  1|> 'np.array()', it does accept python list.
      [ my_array = np.array([elem1, elem2, elem3, ...]) ] 

    - You can Use the same idea in case of multidimential array 
      [ my_array = np.array([ [...],
                              [...],
                               ...   ])]

    |> Full Prototype Function: 
        numpy.array(
            object,
            dtype=None,
            *,
            copy=True,
            order='K',
            subok=False,
            ndmin=0,
            like=None
        )
        _______________________________________________________________________
        | Parameter | Type       | Description                                |
        |-----------|------------|--------------------------------------------|
        | object    | array.like | Input data (list, tuple, ndarray, etc.) to | 
        |           |            | be converted into an array                 |
        |-----------|------------|--------------------------------------------|
        | dtype     | data-type, | Desired data type of the array (e.g.,      |
        |           | (optional) | `np.int32`, `np.float64`).                 |
        |-----------|------------|--------------------------------------------|
        | copy      | bool,      | If `True`, a copy of the data is made. if  |
        |           | (optional) | `False`, a copy is only made if necessary  |
        |           |            | Default is `True`                          |
        |-----------|------------|--------------------------------------------|
        | order     | {'K', 'A', | Memory layout of the array:                |
        |           |  'C', 'F'} | `'C'`: C-style (row-major)                 |
        |           | (optional) | `'F'`: Fortran-style (column-major)        |
        |           |            | `'A'`: Any                                 |
        |           |            | `'K'`: Match input as closely as possible  |
        |-----------|------------|--------------------------------------------|
        | subok     | bool,      | If `True`, subclasses are passed through;  |
        |           | (optional) | otherwise, a base-class array is returned  |
        |-----------|------------|--------------------------------------------|
        | ndmin     | int,       | Specifies the minimum number of dimensions |
        |           | (optional) | that the resulting array should have.      |
        |-----------|------------|--------------------------------------------|
        | like      | array.like,| Reference object to allow the creation of  | 
        |           | (optional) | that are not NumPy arrays. Used for array  |
        |           |            | creation dispatching                       |
        |-----------|------------|-(introduced in NumPy 1.20)-----------------|

  2|> 'np.zeros()' creates a new array 'filled with zeros', it commonly used
      for initializing arrays or tensors before performing computations.
      > [ Syntax: ] 
        numpy.zeros(shape, dtype=float, order='C')

  3|> 'np.onces()' creates a new array 'filled with ones' 
      > [ Syntax: ]
        numpy.ones(shape, dtype=None, order='C')

  4|> 'np.full()' creates an array filled with a specified value 
      > [ Syntax: ]
        numpy.full(shape, fill_value, dtype=None, order='C')

  5|> 'np.empty()' creates an uninitialized array
      > [ Syntax: ]
        numpy.empty(shape, dtype=float, order='C')

> [ 6|> Identity Matrix: ]

  > [ Syntax: ]
      >>[np.eye(N, M=None, k=0, dtype=np.float64, order='C', *, like=None)]<<

    # NOTE:===========================================================
    # - The identity Matrix is very important Matrix in linear algebra  
    # - The identiy Matrix always squared => that is way it takes only
    #   one dimention in 'shape'. 
    # - eye stands for eye matrix or identity matrix.
    
    - 'N': Number of 'rows' in the output matrix (required) 
    - 'M': number of 'columns' (optional) if 'None' defaults to
          'N' (square matrix) 
    - 'k': (key level) diagonal index 
      . 'k=0': -> main diagonal 
      . 'k>0': -> above main  
      . 'k<0': -> below main 
    - 'dtype': data type of the output array (default: float) 
    - 'order': 'C' or 'F': Memory layout: row-major('C') or column-major ('F') 
    - 'like': 'array_like' or 'None': new in Numpy 1.20 allows creation based on
              the tyep fo another array (used in array creation protocols)
  
  7|> 'np.indices()': is a numpy function that 'generates grid index arrays'
                      for a given shape. 

      [ np.indices(dimensions, dtype=int, sparse=False) ]

        . 'dimensions': Tuple indicationg the shape of the output gride
                        (e.g (3, 4))
        . 'dtype': Data type of the input array 
        . 'sparse': if 'True', returns a sparse meshgrid (saves memory)

> [ Create Array With Random value ]

  1. 'np.diag([el1, el2, el3, ...])': create a 'squared matrix' with diagonal
     data rows (el1, el2, el3, ...)

  2. 'np.arange(start, stop, step)': start -> stop 'Integer numbers', and stop
     is exclusive. (like 'range' in python) 

  3. 'np.linspace(start, stop, arr_length || num=)': start -> stop 'Float Numbers' and 
     stop is 'inclusive' (linspace stands for 'linear space')
     # NOTE:===================================
     # - endpoint=false excludes the stop value 
     # - (start, stop) E Z
     # ========================================

  4. 'np.random.rand(rows, cols)': using rand() function from 'random module'
     to generate 'random floats' from a 'uniform distribution' 0|-> 1

  5. 'np.random.uniform(start, stop, size=(rows, cols))' generating
     'random floats' from 'start to stop' from a 'uniform distribution'

  6. 'np.random.random(rows, cols)' generationg random floats from 0|-> 1
     'random distribution'.

  7. 'np.random.randint(start, stop, lenght=, shape=)': generates random
     'integer' numbers from start to end with 'length=number' or
     'shape=(row, col)'
     # NOTE: stop is => exclusive 

  8. 'np.random.normal(mean, standart deviation, shape=(rows, cols))' generates
    'normal distribution'

  9. 'np.random.randn(rows, cols)' generates a 'standard normal distribution'

  # WARNING:====================================================================
  # You need to understand 'Uniform distribution', 'random distribution',
  # 'normal distribution' and 'standard normal distribution' in statistics 

  10. 'np.random.choice(arr, size=)' create another array with 'size=' of
      'random selection' from 'arr' 

  11. 'np.random.permulation(arr)' it create a 'shafled' or 'permulated' array
      from the 'arr' passed as an argument.

> [ Array Manipulation: ]
  1|> 'np.reshape(arr, shape=(rows, cols))' it will reshapes the 'arr' to new
      'shape=' or 'arr.reshape(rows, cols)' 
  # WARNING:> if the new shape does not fit the array, A 'Value error' raise up

  2|> 'x.T', It does 'Transpose' the array, It 'switches' 'columns by rows' and
      'vice versa'.

  3|> 'np.delete(arr, [index0, index1, ...], axis=0/1)': It does remove the list
      of elements with the [index0, index1, ...] from 'arr'. 
      . axis= 0: represent the row
      . axis= 1: represent the column
      [ numpy.delete(arr, obj, axis=None) ]
      # NOTE:===================================================================
      # - The indexes points on rows/colmns instead of elements, When 'axis' is 
      #   defined.

  4|> 'np.append()': appends 'values' into 'arr' as 'row if axis =0' and as
      'column if axis=1', otherwise add it to the  & Searching end of list 
      numpy.append(arr, values, axis=None)

  5|> 'np.insert()': insert values at a specific index (of row/colmn if
      axis!=None)
      [ numpy.insert(arr, obj, values, axis=None) ]

  6|> 'np.vstack((y, x))': 'vertical stack', it does stack 'y rows' on the top
      of 'x rows' 
      . (y, x, ...): tupples of tensors 

  7|> 'np.hstack((y, x))': 'horizontal stack', it does stack 'x columns' on the
      'right of x'

  8|> 'np.split(arr, nbr)' > Split into 'nbr' equal parts.

  9|> 'np.isnan(arr)': check if there is a 'not a number value' exist 
      |=> return nan arr: [False, True, Fase, ...]
  
  10|> 'np.isinf(arr)', it checks for '+-infinity' 

  11|> 'np.concatenate((arr1, arr2, ...))', Concatenates arrays into 'one array' 

  12|> 'np.array_equale(arr1, arr2)', it simply compares each element of
       'both arrays' 
       |=> return 'True/False'

  13|> 'np.equal(arr1, arr2)', It does the same as np.array_equal but:
       |=> return array [ True, True, False ] 
       # NOTE: np.not_equale(arr1, arr2) => return array [ False, False, True ]

  14|> 'np.pad(array, pad-width, mode="constant", **kwargs)' 
       - This function adds 'padding to arrays', that is it adds values (like
         zeros or other constants) around the edges of an array along one or
         more dimensions.
        . 'Array': The input Numpy array you want to pad 
        . 'pad_width': Specifies the number of values padded to the edges of
          each axis
        . 'mode': Specifies how to pad the array, Common values include
          'constant', 'edge', 'reflect', 'symmetric', etc
        . '**kwargs': Extra arguments specific to the 'padding mode'

  15|> 'np.tile(A, reps)': 'repeats (tiles)' an array multiple times to build a
                          large array. (It's like "copy-pasting" your array in
                          a gride pattern)

              >>> [ np.tile(A, reps) ] <<<

        . 'A': The input array to be repeated (tiled)
        . 'reps': A single int or a tuple of ints, how many times to repeat
                  along each axis

      # INFO:-------------------------------------------------------------------
      # - tile: (noun) one of the flat square pieces that are used for covering 
      #   roofs, floors, or walls. (ŸÇŸéÿ±ŸíŸÖŸäÿØ)
      # ------------------------------------------------------------------------

    > [ Ex: ]
          np.tile([1, 2, 3], (2, 3))

  16|> 'np.repeat(a, repeats, axis=None)' 
      - `np.repeat()`: 'repeats individual elements' of an array, rather than 
                       repeating the entire array like `np.tile()`

    > [ Ex: ]
      np.repeat([1, 2, 3], 2) # => [1, 1, 2, 2, 3, 3]
      np.repeat([1, 2, 3], [1, 2, 3]) # => [1, 2, 2, 3, 3, 3] 

  # INFO:===============================================
  # - np.repeat() => 'repeats elements' of an array
  # - np.tile()   => 'repeats the whole array' structure
  # ====================================================

> [ Array Indexing & Slicing ]
  - Let's consider arr as an 2D array
    arr = [[ 3, 1]
            [4, 2]] 

    * 'Syntax 1': arr[0][1] = 1 | Indexing one element 

    * 'Syntax 2': arr[0, 1] = 1 | indexing one element

    * 'Syntax 3': arr[start_row:end_row, start_col:end_col] | indexing ranges  
      # NOTE:====================================================================
      # - If you leave *_(row/col) empty, It will take default value
      # E [0, cols/rows].
      # - If you take a slice from 'arr', ANY CHANGE on the Slice, will MAKE
      #   EFFECT on the original 'arr', Use function 'np.copy()' 
      # - Syntax: np.copy(slice) or arr[...].copy(), to get new object in memory  
      #   that does not effect the original object

    * 'Syntax 4': np.diag(arr) => is used for slicing also, It retuns  and
                  'array' with 'all main diagonal elements at k=0'. 
        [ np.diag(v, k=0) -> ndarray: ]
            > v: array_like
            > k: (optional) key level
                . k=0: main diagonal 
                . k>1: 'above' the main diagonal
                . k<1: 'below' the main diagonal

    * 'Syntax 5': 'np.unique(arr, return_counts=False)' returns an 1D array with
                  only unique elements from 'arr'.
      # INFO:==================================================================
      # If return_counts=True, np.unique() returns another array that contains 
      # each element 'occurence counter'.

    # NOTE:===================================================================== 
    # Most of the slicing methods used above requires you to know indeces
    # specifically, What about if have a large matrix, how can slice it 
    # then, The answer is the next SECTION (Using comparision operators). 

  * 'Syntax 6': (arr > x), this syntax returns slice arr with 'same dimentions'
                but with 'boolean values'. It 'compares each element from' 
                'arr with x'  
  * 'Syntax 7': (arr[(arr>x) & (arr<y)]), This syntax slice and 1D array that
                stores all the 'elements in the ]x, y[ range'
                # NOTE:=========================================================
                # - using `&` operator is not mandatory. 
                # - Ex: slice = 1 changes all element in the slice and original
                #   tensor.

  * 'Syntax 8': 'Union/Diff/Intersection' between 'two arrays'  
                > [ np.union1d(arr1, arr2)  ]> returns the 'union of arr1 and'
                                               'arr2 without duplication'.
                > [ np.setdiff1d(arr1, arr2)]> returns the 'difference between'
                                                'arr1 and arr2', 1d array 
                                                contains all elements in 'arr1'
                                                but not in 'arr2'.
                > [ np.intersect1d(arr1, arr2)]> returns a 1d array that 
                                                  contains all the elements in 
                                                  both 'arr1 and arr2'.
  * 'Syntax 9': 'np.where(condition)' 
                - This function returns the 'indeces' where condition is 'true' 

> [ Sorting & searching: ]
  1|_ 'np.sort(arr) & arr.sort()': It 'sorts' an array. 
      -> 'np.sort(arr)'         => return a new sorted array 
      -> 'arr.sort()'           => sort the original array
      -> '(np.sort(arr))[::-1]' => return a new sorted array in 'descending'
         'order' 
      -> 'np.sort(arr, axis=0)' => 'sorts each column' of 'arr' in 'ascending order'
      -> 'np.sort(arr, axis=1)' => 'sorts each row' of 'arr' in ''

  2|_ 'np.argsort(arr)' returns the 'indeces' of 'arr sorted'  
      > Ex: arr = [2, 1, 3] => np.argsort(arr) = [1, 0, 2] 
            index: 0, 1, 2  =>            elems:  1, 2, 3 => sorted
      - Sorting by a specific column:
          arr[arr[:,0].argsort()]
          . arr[:, 0]: slice column at index 0 from all rows
          . arr[arr[:,0].argsort()]: sorts the column at index = 0 

  3|_ [ Searching: ]
    * 'np.(argmax(arr)/argmin(arr))':
      - 'np.argmax(x)': finding the 'index' of the 'first occurence of maximum'
        'value'. 
      - 'np.armin(x)': finding the 'index' of the 'first occurence of minimum'
        'value'.

> [ Math Operations: ]
  1|> 'Addition': 'arr1 + arr2' || 'np.add(arr1, arr2)' 
                  - np.add() is 'recommanded' because it is 'fast'.

  2|> 'Substraction': 'arr1 - arr2' || 'np.substract(arr1, arr2)' 

  3|> 'Multiplication': 'arr1 * arr2' || 'np.multiply(arr1, arr2)' 
  
  4|> 'Divison': 'arr1 / arr2' || 'np.divide(arr1, arr2)'  

  5|> Math Operations: 
      - 'np.sqrt(arr)'            : square root 
      - 'np.exp(arr)'             : natural exponential  
      - 'np.power(arr, exponent)' : Xi^exponent 
      - 'arr.mean(axis=None)'     : mean of all
          . If 'axis=0': average of columns => [cmean0, cmean1, ...]
          . If 'axis=1': average of rows    => [rmean0, rmean1, ...]
        # NOTE:> You can use 'np.mean(arr)' syntax. 
      - 'arr.sum(axis=None)'      : sum of all elements 
          . if 'axis=0': sum of columns     => [csum0, csum1, ...] 
          . if 'axis=1': sum of rows        => [rsum0, rsum1, ...] 
        # NOTE:> You can use 'np.sum(arr)' Syntax 
      - 'np.dot(arr1, arr2)' It makes 'dot product' in linear algebra 
      - 'np.matmul(arr1, arr2)' It makes 'matrix multiplication'
      - 'np.linalg.det(arr)': returns the 'determinant'
        # NOTE: 'linalg' stands for linear algebra

      - 'np.linalg.inv(arr)': returns the 'inverse matrix' of 'arr'
      - 'np.linalg.eig(arr)': returns two values 'eigenvalues' and 'eigenvectors' 

      # INFO:[ Statistical Operations ] 
      - 'np.var(arr) || arr.var()': returns the 'variance' 
      - 'np.std(arr) || arr.std()': retuns the 'standard deviation'
      - 'np.median(arr)': returns the 'middle value (median)' 
      - 'np.max() || arr.max()': returns  the 'max value'
      - 'np.min() || arr.min()': returns  the 'min value'
      - 'np.corrcoef(arr)': returns 'correlation matrix' 
      - 'np.cov(arr)': returns 'covariance matrix'

===[ Saving Array: ]===
  * 'np.save()' is used to 'save NumPy array to a binary file' in '.npy' format
    this is 'fast, compact' and 'preserves' all array information such as:
    - Shape
    - Data Type
    - Endianness
    - For structured arrays: field names and metadata
  
  > [ Syntax: ]
    # data will be saved in binary file called my_array.npy
    np.save('my_array', ndarray) 
    # data will be loaded from my_array.npy file and return ndarray object 
    np.load('my_array.npy')

===[ Tensors: ]===
  - Tensor comes from the latin word 'tendere' meaning 'to stretch'
  - Scalar: is a single number that describe magnitude and direction. That 
            is why the 1D array still make sense, same rules still applied 
            (vector describe, 'direction and magnitude')
            |=> Vector of length 1 or matrix (1x1)
  - vector: Is an object mathematical quentity that describes magnitude
            and direction (sum of scalars) (Row vector or Column Vector)
  - matrices: sum of vectors => (system equation or transformation) 
  - Tensor: is a 'mathematical object' that 'generalizes', 'Scalars', 'vectors'
    , and 'matrices' to 'higher dimensions'. 
      . A 'saclar' is a '0th-order' tensor (just a number)=> rank0 |1x1  
      . A 'vector' is '1st-order tensor' (a list of numbers)=> rank1 |1xm or mx1 
      . A 'matrix' is '2nd-order tensor' (a grid or table of numbers) rank2|mxn 
    * 'Tensors' can go beyond this: => rank3 | (m x n x k)
      . A '3rd-order' tensor might be a cube of numbers (for 'RGB' image data)
      . 'Higher-order' tensors extend this idea to more dimenstions

# INFO:=========================================================================
# - Tensors represent 'multilinear relationships' between sets of vectors and
#   are used to encode data with multiple indices or directions.
# > [ Use Cases: ]
#   * Physics: Tensors describe physical quantities like stress, strain
#   * Engineering: Used in continuum mechanics
#   * Machine learning: Frameworks like TensorFlow  use tensors to store
#                       and compute multi-dimensional data. 
#   * Computer Vision: Tensor represent images, videos or feature maps
# > [ Summary: ] Tensors are the natural extension of vectors and matrices
#                to represent complex, multi-dimensional data.
