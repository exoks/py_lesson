#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä                 ìêì  Seaborn ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou <oussama.ezzaou@gmail.com> 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/07/16 17:39:05 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/07/21 12:42:20 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

===[ Index: ]===================================================================
1|> Seaborn: Introduction
2|> Built-in Datasets

3|> Distribution Plots (for quentitive/numerical variables) 
    1. sns.distplot(): visualize single variable distribution
    2. sns.jointplot(): compare & visualize two variable distributions
    3. sns.kdeplot(): visualize 1 or 2 variables using KDE instead of histograms
    4. sns.pairplot(): visualize all paires of a dataset in a form of grid 
    5. sns.rugplot(): just a complement plot, to visualize a single distribution

4|> Categorical Plots (for categorical variables)
    1. sns.barplot(): visualize categorical based on estimator
    2. sns.countplot(): visualize categorical based on observation count 
    3. sns.boxplot(): visualizing distribution using (boxplot) across categories 
    4. violinplot(): boxplot() + kdplot() visualize statistical summary + shape
    5. stripplot(): visualize numerical and categorical data in a scatter plot 
    6. swarmplot(): stripplot() + no overlap between dots

5|> Matrix Plots
    1. heatmap(): visualize matrix data (correlation, etc), using color gradient
    2. clustermap(): visualize cluster or groups across data 
    3. PairGrid: (class) more customization of sns.pairplot() / Visualizing  
                  all dataset pairs of type numerical variables 
    4. FacetGrid: (class) split data set into subsets and visualize them 
                  a cross categories 

6|> Regression Plots
    1. regplot(): scatter + regression: relationship + regression 
    2. lmplot(): facetGrid + regplot(): regression plot across categories

===[ Seaborn: Introduction ]====================================================
* 'Seaborn is high-level' python 'data visualization library' built 'on top of'
  'Matplotlib', It is specifically designed to make 'statistical graphics'
  easier and more attractive with 'minimal code'. 

===[ Motivation/Purpose Behind Seaborn: ]===
- The 'key here' is 'labled data', as I am noticed that matplotlib, deal with
  'unlabled data (numpy.ndarray)', The same story repeats itself again
  (Numpy & Pandas). 

- 'Pandas' and 'Seaborn' Were Created for the same reason:
  " To Make 'working with labeled', 'structured data', 'easier and more' "
  " 'intuitive' than using raw 'Numpy arrays' "

  # NOTE:------------------------------------------------------------------
  # - DO NOT FORGET that <real-datasets> are <Labeled>, That is way we need 
  #   Labeled data structure to use (DataFrames & Series)

===[ Matplotlib VS Seaborn ]===
________________________________________________________________________________
| Feature / Aspect | Matplotlib                         | Seaborn              |
|------------------|------------------------------------|----------------------|
| Level            | Low-level (core plotting library)  | High-level (built on |
|                  |                                    | top of Matplotlib)   |
|------------------|------------------------------------|----------------------|
| Data Input Type  | Primarily `NumPy` arrays or plain  |`pandas` DataFrames & |
|                  | lists                              | Series (labeled data)|
|------------------|------------------------------------|----------------------|
| Pandas           | Not native, needs manual column    | Native works directly|
| Integration      | extraction                         | with column names    |
|------------------|------------------------------------|----------------------|
| Customization    | Very flexible ‚Äî full control       | Somewhat limited (but|
|                  |                                    | you can still access |
|                  |                                    | Matplotlib if needed)|
|------------------|------------------------------------|----------------------|
| Complex Plot     | Subplots via `plt.subplot()`       | Built-in functions   |
| Grids            | or `GridSpec`                      | like `FacetGrid`,    |
|                  |                                    | `PairGrid`, `catplot`|
|------------------|------------------------------------|----------------------|
| Learning Curve   | Steeper for complex plots          | Easier for statistical
|                  |                                    | visualizations       |
|------------------|------------------------------------|----------------------|
| 3D Plotting      | Supported via`mpl_toolkits.mplot3d`| ‚ùå Not supported     |
|------------------|------------------------------------|----------------------|
| Use Case         | General-purpose plotting           | Statistical/data-    |
|                  |                                    | driven exploration   |
|------------------|------------------------------------|----------------------|
| Underlying Engine| Native (core rendering engine)     | Uses Matplotlib under|
|                  |                                    | the hood             |
|__________________|____________________________________|______________________|

# QUESTION:[ Why is called Seaborn ? ]------------------------------------------
# - the library was created by 'Michael Waskom'
# - The name is a fly on the word 'Seaborn' meaning 'born from the sea', The
#   name 'brings new life (beautiful, elegant visualization from vast 'sea' of
#   raw data)'.
# - So The name is metaphorical, 'Seaborn' emerges to help you navigate and
#   visualize the vast sea of data with ease and beauty.
# NOTE:> vast: (adject) very big |----------------------------------------------

# INFO:[ Summary: ]=============================================================
# - 'Seaborn' is built to handle labeled data ‚Äî in other words, to work directly
#   with 'pandas DataFrames and Series'.
# ==============================================================================

===[ Seaborn: Built-in Datasest ]===============================================
* Seaborn library contains a set of built-in datasets.

  1|> 'seaborn.get_dataset_names()'
      * Used to 'list all available built-in datasets' that can be loaded using
        'seaborn.lead_dataset()'

        [ sns.get_datasets_names() ]
        . Returns a list of datasets names 

  2|> 'seaborn.load_dataset()'
      * Is used to 'load built-in datasets' provided by Seaborn into a
      'Pandas DataFrame'.

      [ sns.load_dataset(name) ]
      . 'name': The name of the dataset to load  
      # NOTE:---------------------------------------------------------
      # - `name` must be ones of those returned by get_dataset_names()
      # - You must be connected to the internet the 'first time', so
      #   Seaborn can fetch the list from the online repository.

===[ Distribution Plots: ]======================================================
* A 'distribution plot' visualizes how a dataset is spread over a range of
  values, the 'probability distribution' of a single variable (univariate) or
  joint distribution of two variables (bivariate)
  - In Seaborn these plots help inderstanding:
    > The 'shape' of the data (normal, skewed, etc)
    > The 'spread (dispersion)' (range, standard deviation)
    > The 'central tendency' (mean, median)
    > Presence of 'outliers' or 'multiple modes'

===[ sns.distplot(): univariate plot ]===
* It is used as 'Histogram' with optional KDE and frequency/percent display
  - Good for basic distributin shape, binning frequency

    [ sns.distplot(data, x=None, kde=False, bins=10) ]
    . 'data'/'x': Dataset or Series
    . 'kde': Adds kernel density estimation curve
    . 'bins': number of histogram bins

  > [ Return values: ]
    - 'sns.histplot()' returns an 'Axes object' (matplot.lib.Figure.Axes)

===[ sns.jointplot(): bivariate plot ]===
* It is 'Multivariate plot' that combines scatter + hist/KDE for 2 variables
  - It is used to 'compare two distribution', and show the relationship between
    'two variables' 

    [ sns.jointplot(data=df, x='feature1', y='feature2', kind='scatter') ]

    . 'data': DataFrame containing the data
    . 'x', 'y': column names for 'x' and 'y' axes 
    . 'kind': Type of bivariate plot: 'scatter', 'kde', 'hist', 'hex', 'reg'


===[ sns.kdeplot(): both(univariate, bivariate) ]===
* Is it used to 'estimate and visulaize the probability density function (PDF)'
  of a 'continuous variable' using a technique called 'kernel Density Estimation'
  (KDE)
  - Think of as a 'smoothed version of a histogram' that provides a continuous
    curve rather than discrete bars.

    [ sns.kdeplot(data=df, x="feature") ]
    . 'data', 'x', 'y': Input dat (1D or 2D)

# QUESTION:[ Why using KDE instead of a Historgram? ]---------------------------
# - No bins
# - Smooth shape: reveals the underlying distribution bettter
# - More interpretable: good for detecting 'modality' (number of peas),
#   'skewness' or 'outliers'.

===[ sns.pairplot(): (multivariate) ]===
* 'sns.pairplot()' creats a 'grid of plots' showing 'pairwise relationship'
  between 'numeric variables' in a DataFrame
  - It helps in:
    > Visualizing 'correlation' and 'distributions'
    > Performing quick 'exploratory data analysis (EDA)'.

  [ sns.pairplot(data=df) ]
  . 'data': The dataFrame to visualize
  . 'hue': Categorical variable to color-code groups

===[ sns.rugplot(): (univariate) ]===
* A 'rug plot' is very simple plot that shows 'individual data points' along an
  axis as small 'tick marks'.
  - It is often used to 'complement' other plots (like KDEs or histograms)
    by showing the 'actual raw data values'
  - It does look like:
    > Each observation/case is shown as 'short-vertical or (horizontal) line'
      along the axis.
    > It looks like a 'rug' placed along the base of a plot
    # INFO:---------------------------------------------------------------------
    # Rug: (noun): a soft piece of material used to cover the floor (ÿ≥Ÿéÿ¨ŸëÿßÿØÿ©)

===[ Categorical Plots: ]=======================================================
* Categorical plots are used to 'visualize relationships involving categorical'
  'variables'.
  - These plots are useful when: 
    > You want to 'compare' values 'accross categories' 
    > You are analyzing 'distribution', 'central tendency', and 'spread' across
      different groups.
  # NOTE:> Categorical plots focus on distributions using categorical data

===[ sns.barplot() ]===
* 'seaborn.baplot()': is used to 'display the mean (or another estimator)'
  'of a quantitative variable for each category'.
  unlike 'boxplot()', which shows distribution, 'barplot()' shows 'aggregated'
  'values' (like the mean or median), often with 'confidence intervals'.

  [ sns.barplot(x='category', y='value', data=df, estimator='mean') ]

    . 'x', 'y': Are the input feature 
    . 'data': pandas DataFrame 
    . 'estimator': tells Seaborn 'how to summarize the data for each category'
                   when plotting 
                   - 'mean'   | np.mean
                   - 'median' | np.median 
                   - 'max'    | np.max
                   - 'min'    | np.min
                   - 'std'    | np.std 
                   -          | np.var
                   -          | np.cov
                   - ...      | etc

    # NOTE:> Aggregate data means summarize it in one quentity (like mean).


===[ sns.countplot() ]===
* 'countplot()' is 'bar plot that displays the count (frequency) of'
  'observation/case' in each category of a categorical variable, Unlike
  'barplot()' which 'aggregates numeric data using an estimator (like mean)'
  - 'barplot()': bar height shows summary statistic (like mean, median, etc)  
  - 'countplot()': bar height show the 'count' of observation in a category 
  [ sns.countplot(x='category1', y='category2', dat=df) ]
  . 'x', 'y': The input features (categorical variables)
  . 'data': pandas dataFrame

===[ sns.boxplot() ]===
* 'seaborn.boxplot()' creates a 'box-and-whisker plot', which is a 'statistical'
  'summary plot' used to visualize the 'distribution', 'central tendency' and
  spread of a dataset, (especially across different categories).  

  [ sns.boxplot(x='x-axis', y='y-axis', data=df, hue=) ]

    . 'x', 'y': input features 
    . 'data': The pandas dataFrame                   
    . 'hue': (optional) categorical variables to split the bar 


===[ sns. violinplot() ]===
* A 'violin plot' combines features of:
  - 'boxplot'
  - 'kdeplot': showing the full distribution of the data 
  > So 'violin plot' is used to 'visualize the distribution and probability'
  'density' of a numeric varibale across one or more categories 

  # QUESTION:[ When to use it? ]================================================
  # > When you want to see both 'summary statistics' and 'distribution shape'.

  [ sns.violinplot(x='category', y='value', data=df) ]

    . 'x', 'y': input features 
    . 'data': The pandas dataFrame                   
    . 'hue': (optional) categorical variables to split the bar 

    # INFO:---------------------------------------------------------------------
    # - violin: (noun) a wooden musical instrument that you hold against your
    #   neck and play by moving a stick across strings (arabic: kamman) 

===[ stripplot() ]===
* 'stripplot()' draws a 'scatter plot' where one variable is 'categorical' and
  the other is 'numeric'. 
  - it 'plots all individual data points', not summaries like in 'boxplot' or
    'violinplot' allowing you to:
      > see the 'raw data'
      > identify 'clusters', 'density', or 'outliers'
      > Ovserve 'overlapping of values' 

  > [ Why Use it ]
    - To 'visualize individual ovservations' instead of aggregates
    - To get a sense of how many data points there are in each category.

  [ sns.stripplot(x='category', y='value', data=df) ]
    . 'x', 'y': input features 
    . 'data': The pandas dataFrame                   
    . 'hue': (optional) categorical variables to split the bar 


===[ swarmplot() ]
* A 'swarmplot()' is a categorical scatter plot, like 'stripplot()' but it uses
  an algorithm to 'arrange the points so that they do not overlap' even if the
  data values are the same.
  - You get 'individual data points'
  - Spread out 'automatically'
  - Still grouped by category.

  # INFO:-----------------------------------------------------------------------
  # swarm: (noun) a large group of people all moving together

  [ sns.swarmplot(x='category', y='value', data=df) ]
    . 'x', 'y': input features 
    . 'data': The pandas dataFrame                   
    . 'hue': (optional) categorical variables to split the bar 

  # NOTE:> swarmplot() = stripplot() + no overlaping between dots  

===[ Matrix plots: ]============================================================
* In 'Seaborn', 'matrix plots' are used to display data structured in a
  '2D matrix form', often involving 'relationships' between 'pairs of variables' 
  or showing 'values' across a 'grid of coordinates'.
  - The are useful to visualizing 'correlations', 'similarities', or
    'distance-based relationships' in tabular or array-like data

  # REVISION:------------------------------------------------------------------
  # These kinds of plots remember me by 'contigency table/cross tabs' in
  # statistics, where we use it to understand the correlation between
  # categorical variables (using frequnecy or count).

# CONCLUSION:-------------------------------------------------------------------
# matrix plots are based on matrix-style table (a 2D representations like
# DataFrames or 2D arrays)

===[ sns.heatmap() ]===
* It is used to 'visualize' a 'matrix of values' using a 'color gradient', Each
  'cell' in the matrix is 'color-coded based' on its numeric value, making it
  easy to 'spot', 'patterns', 'trends', or 'anomalies'.
  - These values are (correlation, confusion, missing data)

  [ sns.heatmap(data=df.corr(), annot=True, cmpa='collwarm') ]

  . 'annot=True': shows the numeric values in each cell
  . "cmap='colorwarm'": defines the color scheme

  # INFO:-----------------------------------------------------------------------
  # - annotation: (noun) a short explanation or note added to a text or image, 
  #   or the act of adding shor explanations or notes.
  # - in the context of computing means adding a description or peice of
  #   information added to data. 


===[ sns.clustermap() ]===
* 'sns.clustermap()': is a powerfull visualization tool that combines 
  'heatmaps' with 'hierarchical clustering'.
  - 'clustermap()' deos 3 things: 
    1|> 'Reorder the table' (rows and columns) so that similar things are close
       to each other
    2|> 'Draws a heatmap' (colored table) to show the values 
    3|> 'Adds dendrograms' (tree diagrams) to show how the groups were formed 

      [ sns.clustermap(data, 
                       method='average', 
                       metric='euclidean', 
                       z_score=None, 
                       standard_scale=None,
                       cmap='viridis')        ]

        . 'data': 2D matrix (DataFrame)
        . 'method': clustering algorithm (single, complete, average, ward)
        . 'metric': Distance metric ('euclidean', 'correlation')
        . 'z_score': Normalize rows (0) or columns (1) using z-score 
        . 'standard_scale': Normalize rows or columns to [0, 1]
        . 'cmap': colormap for heatmap 

  # QUESTION:[ Why use it and When to use it ? ]================================
  # - Because raw tables are messy. 'clustermap()' helps you
  #   'see hidden patterns' like:
  #   - let's take a dataset of student in their score in different subjects 
  #   . 'these students have similar scores'
  #   . 'these subjets behave the same way across students'
  # > [ When to use it? ]
  #   - You have a DataFrame with many rows/columns of numeric data
  #   - You want to 'find structure or clusters'
  #   - You want a 'better visual' than just a raw table or simple heatmap

===[ PairGrid: Class ]===
* Is a 'grid-based plot framework' that allows you to 'create a matrix'
  'of plots', where: 
  > Each 'row and column' in the grid represents a variable (numeric)
  > You can map 'different kinds of plots' to:
    - The 'diagonal' (e.g. histograms)
    - the 'upper triangle' (e.g scatterplots)
    - and the 'lower triangle' (e.g. KDE plots) 
  - It gives you full control over how the grid looks and behaves, It is like
    a more customizable version of 'sns.pairplot()' 

      
      [ PairGridObj = sns.PairGrid(data, 
                                   vars=None, 
                                   hue=None, 
                                   palette=None, 
                                   corner=False) ]


        . 'PairGridObj': is an empty grid system
      
      > [ Common Methods: ]
        * 'PairGridObj.map(plot)': apply 'plot' same function everywhere 
        * 'PairGridObj.map_diag(plot)': apply 'plot' for diagonal (e.g,
          historgrams, etc)
        * 'PairGridObj.map_upper(plot)': apply 'plot' upper diagonal
        * 'PairGridObj.map_lower(plot)': lower triangle 
        * 'PairGridObj.map_offdiag(plot)': remove 'plot' from diagonal 
        * 'PairGridObj.add_legend()': add legend to the grid.

  # NOTE:-----------------------------------------------------------------------
  # - You can use either matplotlib plots (e.g. plt.scatter) or seaborn plots
  #   (e.g. sns.kdeplot)

> [ Summary: ]
  - PairGrid: had grid system kaypairi liya all different numerical variables o
    kay3tini more control 3la lgrid dyal 3la 3akss pairplot()  

===[ FacetGrid: class ]===
* 'FacetGrid' is used to create a 'grid of plots based on one or more'
  'categorical variables'.
  - It 'splits your dataset into subsets' according to the value of categorical
    variables(s). 
  - It then draws the 'same kind of plot' (e.g, scatterplot, ...) for each
    subset. 
  - You get a 'matrix (grid) of plots', where each plot corresponds to one
    subset of data. 

  > Hadchi 'tayqassem/split' liya data dyali l 'groups' based 3la categorical  
    data, ex (ila can taqssim 3la hassab sex dyal person o wach taykmi) 
    ghadi yqassem liya dataset 3la 4 (male + keykmi, male + makykmich) 
    and (female + katkmi, female + maketkmich) o bi hadchi ghadi nkoun qader
    nchouf/visualize each groups bohdo kifach (kay3ti tip) o l bill li kay3it 
    ka mital || o had lgroups taykono hda ba3diyathon in a form of grid

    # INFO:-----------------------------------------------------------------
    # facet: (noun) of part of a subject, situation, etc that has many parts
    #   > Ex: She has to many 'facets' to her personality 

    [ g = sns.FacetGrid(data,
                        col=None,
                        row=None,
                        hue=None,
                        palette=None) ]

      . 'col': categorical variables to create columns
      . 'row': categorical variables to create rows
      . 'hue': categorical variable to color plot element withing each facet

      > [ Common Methods: ]
        * 'PairGridObj.map(plot, **kwargs)': apply 'plot' same function
          on each group (do not forget to add args for any plot that you used) 

  > [ When to Use: ]
    - Compare the 'distribution or relationship' of variable 'across categories'
    - Visualize how a pattern changes across groups.
    - Plot many small plots in a grid for easy comparison. 

# INFO:[ FacetGrid VS PairGrid ]-------------------------------------------------
    ____________________________________________________________________________
    | Feature          | `FacetGrid`             | `PairGrid`                  |
    |------------------|-------------------------|-----------------------------|
    |-Data split by    |-Categorical variable(s) |-Numeric variables           |
    |                  |                         | (pairwise)                  |
    |-Purpose          |-Plot same plot type by  |-Plot pairwise relationships |
    |                  | groups                  |                             |
    |-Plot types       |-Histograms, scatterplots|-Scatter, KDE, histograms etc|
    |                  | etc.                    |                             |
    |-Grid dimension   |-1D or 2D (rows, columns)|-Square matrix (variables x  |
    |                  |                         | variables)                  |
    |-Example use case |-Distribution by         |-Relationship between        |
    |                  | categories              | variables                   |
    |__________________|_________________________|_____________________________|

===[ Regression Plots: ]========================================================
* 'regression plots' are a type of statistial visualization used to display and
  analyze the 'relationship between two continuous variables' along with
  'fitted regression model' (typically a linear regression line). 
  - Purpose of regression plots:
    . 'Visualize relationships': between a dependent variable and independent
      variable.
    . 'fit and display a regression model'
    . Aid in 'diagnostic analysis' and 'exploratory Data Analysis (EDA)'
  - Regression Plots combine:
    1. A 'scatter plot' of the raw data points
    2. A 'regression line' representing the best fit model
    3. A 'confidence interval': shaded around the regression line

# INFO:[ Summary: ]=============================================================
# - Regression plots in Seabrn are powerfull tools for 'visual storytelling of'
#   'statistical relationships', offering both 'visual and analytical insight'
#   into how variables interact.

===[ seaborn.regplot() ]===
* 'seaborn.regplot()': is used to 'plot a scatterplot with a regression line' 
  - It is a 'basic function' to plot data (scatter plot) + regression line model
  - It gives a 'full control' over 'Axes'. 

    [   sns.regplot(x=None,
                    y=None,
                    data=None,
                    fit_reg=True
                    scatter=True
                    ...)            ]

    . 'x', 'y': variables to plot
    . 'data': Dataset (like a DataFrame)
    . 'fet_reg': If 'True', fits and plots regression line.
    . 'scatter': If 'True', plots scatter points.

===[ seaborn.lmplot() ]===
* 'seaborn.lmplot()': is 'high-level interface' for drawing 'regression plots'
  built on top of 'FaceGrid' which means it creates a 'figure-level' plot
  (not a single Axes object)
  - While it performs a similar function as 'regplot()' (drawing scatter plots
    with regression lines), 'lmplot()' does:
      . Group data by categories
      . Create 'Multiple regression plots' in a single figure
      . Automatically handle 'subplot layout'.
  > [ Purpose: ]
    - Plot a 'linear regression model' for one or more subsets of your dataset

  # NOTE:> lmplot() stands for 'linear model plot'.

    [ seaborn.lmplot(x=None
                     y=None
                     data=None
                     col=None
                     row=None
                     hue=None
                     paletter=None
                     ...)             ]

  - 'lmplot()': is perfect when you to 'compare relationships across'
    'categories'.  
  - It supports 'automatic subplot arrangment' and makes it easy to draw
    multiple regression plots in one figure.
  - Under the hood, it uses 'regplot()' for each individual plot.

# INFO:[ regplot() VS lmplot() ]------------------------------------------------
  ____________________________________________________________________________
  | Feature          | `regplot()`            | `lmplot()`                   |
  |------------------|------------------------|------------------------------|
  | Returns          | `matplotlib.axes.Axes` | `FacetGrid`                  |
  | Faceting Support | ‚ùå Not supported       | ‚úÖ Yes (`col`, `row`, `hue`) |
  | Customization    | More low-level control | More layout automation       |
  | Ideal Use Case   |-Single plot, detailed  |-Multiple plots,              |
  |                  | control                | category-based               |
  |__________________|________________________|______________________________|

===[ Styling: ]=================================================================
styling => 13:05 
Paletts => 28:07

===[ Figure Style: ]===

  |> 'sns.set_style()': it changes the style of the figure to a different theme

    [ sns.set_style('theme') ]
      . 'theme': seaborn has 5 different themes: 
                 1. 'darkgrid'
                 2. 'whitegrid'
                 3. 'dark'
                 4. 'white'
                 5. 'ticks'
